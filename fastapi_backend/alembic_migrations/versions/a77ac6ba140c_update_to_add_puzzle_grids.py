"""update to add puzzle grids

Revision ID: a77ac6ba140c
Revises: a6f97e9e4641
Create Date: 2025-04-28 14:05:39.895274

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import fastapi_users_db_sqlalchemy
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a77ac6ba140c'
down_revision: Union[str, None] = 'a6f97e9e4641'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('puzzles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('quality_rating', sa.Integer(), nullable=True),
    sa.Column('difficulty_rating', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grids',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('puzzle_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('x_size', sa.Integer(), nullable=False),
    sa.Column('y_size', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['puzzle_id'], ['puzzles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('puzzle_category_association',
    sa.Column('puzzle_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['puzzle_categories.id'], ),
    sa.ForeignKeyConstraint(['puzzle_id'], ['puzzles.id'], ),
    sa.PrimaryKeyConstraint('puzzle_id', 'category_id')
    )
    op.create_table('puzzle_color_association',
    sa.Column('puzzle_id', sa.UUID(), nullable=False),
    sa.Column('color_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['color_id'], ['colors.id'], ),
    sa.ForeignKeyConstraint(['puzzle_id'], ['puzzles.id'], ),
    sa.PrimaryKeyConstraint('puzzle_id', 'color_id')
    )
    op.create_table('puzzle_symbol_association',
    sa.Column('puzzle_id', sa.UUID(), nullable=False),
    sa.Column('symbol_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['puzzle_id'], ['puzzles.id'], ),
    sa.ForeignKeyConstraint(['symbol_id'], ['symbols.id'], ),
    sa.PrimaryKeyConstraint('puzzle_id', 'symbol_id')
    )
    op.create_table('grid_cells',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('x_coordinate', sa.Integer(), nullable=False),
    sa.Column('y_coordinate', sa.Integer(), nullable=False),
    sa.Column('puzzle_id', sa.UUID(), nullable=False),
    sa.Column('grid_id', sa.UUID(), nullable=False),
    sa.Column('symbol_id', sa.UUID(), nullable=True),
    sa.Column('color_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['color_id'], ['colors.id'], ),
    sa.ForeignKeyConstraint(['grid_id'], ['grids.id'], ),
    sa.ForeignKeyConstraint(['puzzle_id'], ['puzzles.id'], ),
    sa.ForeignKeyConstraint(['symbol_id'], ['symbols.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('puzzle_actions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('grid_cell_id', sa.UUID(), nullable=False),
    sa.Column('action_type', sa.String(), nullable=False),
    sa.Column('hint_round', sa.Integer(), nullable=True),
    sa.Column('attempt_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['attempt_id'], ['puzzle_attempt.id'], ),
    sa.ForeignKeyConstraint(['grid_cell_id'], ['grid_cells.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('puzzle_cells')
    op.drop_table('puzzle_symbols')
    op.drop_table('puzzle_hint')
    op.drop_table('puzzle')
    op.drop_table('puzzle_colors')
    op.drop_constraint('puzzle_attempt_puzzle_id_fkey', 'puzzle_attempt', type_='foreignkey')
    op.create_foreign_key(None, 'puzzle_attempt', 'puzzles', ['puzzle_id'], ['id'])
    op.drop_constraint('puzzle_ratings_puzzle_id_fkey', 'puzzle_ratings', type_='foreignkey')
    op.create_foreign_key(None, 'puzzle_ratings', 'puzzles', ['puzzle_id'], ['id'])
    op.add_column('user', sa.Column('date_joined', sa.DateTime(), nullable=False))
    op.add_column('user', sa.Column('last_login', sa.DateTime(), nullable=False))
    op.add_column('user', sa.Column('last_updated', sa.DateTime(), nullable=False))
    op.add_column('user', sa.Column('login_ip', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user', 'login_ip')
    op.drop_column('user', 'last_updated')
    op.drop_column('user', 'last_login')
    op.drop_column('user', 'date_joined')
    op.drop_constraint(None, 'puzzle_ratings', type_='foreignkey')
    op.create_foreign_key('puzzle_ratings_puzzle_id_fkey', 'puzzle_ratings', 'puzzle', ['puzzle_id'], ['id'])
    op.drop_constraint(None, 'puzzle_attempt', type_='foreignkey')
    op.create_foreign_key('puzzle_attempt_puzzle_id_fkey', 'puzzle_attempt', 'puzzle', ['puzzle_id'], ['id'])
    op.create_table('puzzle_colors',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('puzzle_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['puzzle_id'], ['puzzle.id'], name='puzzle_colors_puzzle_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='puzzle_colors_pkey')
    )
    op.create_table('puzzle',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('quality_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('difficulty_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('puzzle_category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['puzzle_category_id'], ['puzzle_categories.id'], name='puzzle_puzzle_category_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='puzzle_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='puzzle_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('puzzle_hint',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('puzzle_cell_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('hint_round', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('attempt_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['attempt_id'], ['puzzle_attempt.id'], name='puzzle_hint_attempt_id_fkey'),
    sa.ForeignKeyConstraint(['puzzle_cell_id'], ['puzzle_cells.id'], name='puzzle_hint_puzzle_cell_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='puzzle_hint_pkey')
    )
    op.create_table('puzzle_symbols',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('puzzle_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['puzzle_id'], ['puzzle.id'], name='puzzle_symbols_puzzle_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='puzzle_symbols_pkey')
    )
    op.create_table('puzzle_cells',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('puzzle_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('x_coordinate', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('y_coordinate', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('symbol_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('color_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['color_id'], ['colors.id'], name='puzzle_cells_color_id_fkey'),
    sa.ForeignKeyConstraint(['puzzle_id'], ['puzzle.id'], name='puzzle_cells_puzzle_id_fkey'),
    sa.ForeignKeyConstraint(['symbol_id'], ['symbols.id'], name='puzzle_cells_symbol_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='puzzle_cells_pkey')
    )
    op.drop_table('puzzle_actions')
    op.drop_table('grid_cells')
    op.drop_table('puzzle_symbol_association')
    op.drop_table('puzzle_color_association')
    op.drop_table('puzzle_category_association')
    op.drop_table('grids')
    op.drop_table('puzzles')
    # ### end Alembic commands ###
